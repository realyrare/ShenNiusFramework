
@{
    ViewData["Title"] = "字典列表 ";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="layuimini-container layuimini-page-anim">
    <div class="layuimini-main">
        <fieldset class="table-search-fieldset">
            <legend>搜索信息</legend>
            <div style="margin: 10px 10px 10px 10px">
                <form class="layui-form layui-form-pane" action="">
                    <div class="layui-form-item">
                        <div class="layui-inline">
                            <label class="layui-form-label">名称</label>
                            <div class="layui-input-inline">
                                <input type="text" name="name" autocomplete="off" class="layui-input" lay-verify="required">
                            </div>
                        </div>
                        <div class="layui-inline">
                            <button type="submit" class="layui-btn layui-btn-primary" lay-submit lay-filter="data-search-btn"><i class="layui-icon"></i> 搜 索</button>
                        </div>
                    </div>
                </form>
            </div>
        </fieldset>
        <script type="text/html" id="toolbarDemo">
            <div class="layui-btn-container">
                <button class="layui-btn layui-btn-normal layui-btn-sm data-add-btn" lay-event="add" onclick="existAuth('add')"> 添加 </button>
                <button class="layui-btn layui-btn-sm layui-btn-danger data-delete-btn" lay-event="delete" onclick="existAuth('deletes')"> 批量删除 </button>
            </div>
        </script>

        <table class="layui-hide" id="currentTableId" lay-filter="currentTableFilter"></table>

        <script type="text/html" id="currentTableBar">
            <a class="layui-btn layui-btn-normal layui-btn-xs data-count-edit" lay-event="edit" onclick="existAuth('modify')">编辑</a>
            <a class="layui-btn layui-btn-xs layui-btn-danger data-count-delete" lay-event="delete" onclick="existAuth('delete')">删除</a>
        </script>
    </div>
</div>

@section js{
    <script>
        layui.use(['form', 'layer', 'table', 'element', 'common'], function () {
            var $ = layui.jquery,
                form = layui.form,
                table = layui.table,
                apiUtil = layui.common,
                layer = layui.layer;
            //layui button onclick必须这样写，不然会出现事件未定义；
            window.existAuth = function (btnName) {
                /*
                 第一个参数是列表名称和数据库nameCode一定要对应;
                 第二个参数是按钮名称和数据库的btnName也要对应的;
                 event 阻止事件冒泡；
                */
                apiUtil.checkAuth("config", btnName, event);
            };
            apiUtil.render({
                elem: '#currentTableId',
                url: 'config/getlistpages',
                toolbar: '#toolbarDemo',
                defaultToolbar: ['filter', 'exports', 'print', {
                    title: '提示',
                    layEvent: 'LAYTABLE_TIPS',
                    icon: 'layui-icon-tips'
                }],
                authorizeFields: true, // 字段权限开关
                autoColumnWidth: true,
                overflow: { // 默认所有表格都超出
                    type: 'tips'
                    , hoverTime: 300 // 悬停时间，单位ms, 悬停 hoverTime 后才会显示，默认为 0
                    , color: 'black' // 字体颜色
                    , bgColor: 'white' // 背景色
                    , header: true, // 表头支持 overflow
                    total: true // 合计行支持 overflow
                },
                cols: [[
                    { type: "checkbox", width: 50 },
                    { field: 'id', width: 80, title: 'ID', sort: true },
                    { field: 'name', width: 150, title: '名称' },
                      { field: 'enName', width: 150, title: '英文名称' },
                    { field: 'type', width: 150, title: '类型' },
                    { field: 'summary', title: '备注' },
                    { field: 'createTime', title: '创建时间' },
                    { field: 'modifyTime', title: '修改时间' },
                    { title: '操作', minWidth: 150, toolbar: '#currentTableBar', align: "center" }
                ]],
                parseData: function (res) {
                    return apiUtil.parseDataFun(res);
                }
            });

            // 监听搜索操作
            form.on('submit(data-search-btn)', function (data) {
                //执行搜索重载
                table.reload('currentTableId', {
                    page: {
                        curr: 1
                    }
                    , where: {
                        key: data.field.name
                    }
                }, 'data');
                return false;
            });

            function refeshTable() {
                table.reload('currentTableId', {
                    page: {
                        curr: 1
                    }
                }, 'data');
            };
            /**
             * toolbar事件监听
             */
            table.on('toolbar(currentTableFilter)', function (obj) {
                var checkStatus = table.checkStatus('currentTableId')
                    , data = checkStatus.data;
                if (obj.event === 'add') {
                    var content = '/sys/config/modify';
                  layer.open({
                        title: '添加字典',
                        type: 2,
                        shade: 0.2,
                        //maxmin:true,
                        shadeClose: false,
                        area: ['600px', '450px'],
                        zIndex: "10000",
                        content: content,
                        end: function () {
                            refeshTable();
                        }
                    });

                } else if (obj.event === 'delete') {  // 监听删除操作

                    var listIds = [];
                    if (data.length > 0) {
                        for (var i in data) {
                            listIds.push(data[i].id);
                        }
                        layer.confirm('您确定执行该操作吗？', { icon: 3, title: '提示信息' }, function (index) {
                            apiUtil.ajax('config/deletes', { ids: listIds }, "application/json", "delete", function (res) {
                                if (res.statusCode == 200 && res.success == true) {
                                    layer.msg(res.msg);
                                    layer.close(index);
                                    refeshTable();
                                } else {
                                    layer.msg(res.msg);
                                }
                            });
                        })
                    } else {
                        layer.msg("请选择需要删除的数据");
                    }
                }
            });

            //监听表格复选框选择
            table.on('checkbox(currentTableFilter)', function (obj) {
                console.log(obj)
            });


            table.on('tool(currentTableFilter)', function (obj) {
                var data = obj.data;
                if (obj.event === 'edit') {
                    var content = '/sys/config/modify?id=' + data.id;
                   layer.open({
                        title: '编辑字典',
                        type: 2,
                        shade: 0.2,
                        shadeClose: true,
                        area: ['600px', '550px'],
                        content: content,
                        end: function () {
                            refeshTable();
                        }
                    });
                    return false;
                } else if (obj.event === 'delete') {
                    layer.confirm('真的删除吗', function (index) {
                        var listIds = new Array();
                        listIds[0] = data.id;
                        apiUtil.ajax('config/deletes', { ids: listIds }, "application/json", "delete", function (res) {
                            if (res.statusCode == 200 && res.success == true) {
                                layer.msg(res.msg);
                                layer.close(index);
                                refeshTable();
                            } else {
                                layer.msg(res.msg);
                            }
                        });
                    });
                }
            });

        });
    </script>
}